import React, { useState, useEffect } from 'react';
import { FaTimes, FaCheck, FaUser, FaMoneyBillWave, FaCalendarAlt, FaBook, FaCreditCard, FaInfoCircle } from 'react-icons/fa';
import './FinePaymentModal.css';

const FinePaymentModal = ({ isOpen, onClose, fineData, onConfirm }) => {
  const [paymentData, setPaymentData] = useState({
    memberId: '',
    memberName: '',
    fineAmount: 0,
    paymentDate: '',
    violatingBookId: '',
    violatingBookTitle: '',
    fineReason: '',
    paymentMethod: 'cash', // cash, bank
    transactionCode: ''
  });

  const [errors, setErrors] = useState({});

  useEffect(() => {
    if (isOpen && fineData) {
      const today = new Date();
      setPaymentData({
        memberId: fineData.readerId || '',
        memberName: fineData.readerName || '',
        fineAmount: fineData.fineAmount || 0,
        paymentDate: today.toISOString().split('T')[0],
        violatingBookId: fineData.bookId || '',
        violatingBookTitle: fineData.bookTitle || '',
        fineReason: fineData.condition === 'damaged' ? 'damaged' : 
                   fineData.condition === 'lost' ? 'lost' : 'late',
        paymentMethod: 'cash',
        transactionCode: ''
      });
    }
  }, [isOpen, fineData]);

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setPaymentData(prev => ({
      ...prev,
      [name]: value
    }));
    
    // Clear error when user starts typing
    if (errors[name]) {
      setErrors(prev => ({
        ...prev,
        [name]: ''
      }));
    }
  };

  const validateForm = () => {
    const newErrors = {};
    
    if (!paymentData.memberId) {
      newErrors.memberId = 'M√£ th√†nh vi√™n l√† b·∫Øt bu·ªôc';
    }
    
    if (!paymentData.fineAmount || paymentData.fineAmount <= 0) {
      newErrors.fineAmount = 'Ph√≠ ph·∫°t ph·∫£i l√† s·ªë d∆∞∆°ng';
    }
    
    if (!paymentData.paymentDate) {
      newErrors.paymentDate = 'Ng√†y thanh to√°n l√† b·∫Øt bu·ªôc';
    }
    
    if (!paymentData.violatingBookId) {
      newErrors.violatingBookId = 'M√£ s√°ch vi ph·∫°m l√† b·∫Øt bu·ªôc';
    }
    
    if (!paymentData.fineReason) {
      newErrors.fineReason = 'L√Ω do ph·∫°t l√† b·∫Øt bu·ªôc';
    }
    
    if (!paymentData.paymentMethod) {
      newErrors.paymentMethod = 'H√¨nh th·ª©c thanh to√°n l√† b·∫Øt bu·ªôc';
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    
    if (!validateForm()) {
      return;
    }

    // T·∫°o phi·∫øu thu ph√≠ ph·∫°t
    const finePayment = {
      id: Date.now(),
      memberId: paymentData.memberId,
      memberName: paymentData.memberName,
      fineAmount: paymentData.fineAmount,
      paymentDate: paymentData.paymentDate,
      violatingBookId: paymentData.violatingBookId,
      violatingBookTitle: paymentData.violatingBookTitle,
      fineReason: paymentData.fineReason,
      paymentMethod: paymentData.paymentMethod,
      transactionCode: paymentData.transactionCode,
      status: 'paid',
      createdAt: new Date().toISOString()
    };

    console.log('Phi·∫øu thu ph√≠ ph·∫°t:', finePayment);
    
    // Th√¥ng b√°o th√†nh c√¥ng
    alert(`‚úÖ Thanh to√°n ph√≠ ph·∫°t th√†nh c√¥ng!

üìã Th√¥ng tin thanh to√°n:
‚Ä¢ M√£ phi·∫øu: ${finePayment.id}
‚Ä¢ Th√†nh vi√™n: ${finePayment.memberName}
‚Ä¢ S√°ch vi ph·∫°m: ${finePayment.violatingBookTitle}
‚Ä¢ S·ªë ti·ªÅn: ${finePayment.fineAmount.toLocaleString('vi-VN')} VND
‚Ä¢ Ng√†y thanh to√°n: ${new Date(finePayment.paymentDate).toLocaleDateString('vi-VN')}
‚Ä¢ L√Ω do: ${getFineReasonText(finePayment.fineReason)}
‚Ä¢ H√¨nh th·ª©c: ${finePayment.paymentMethod === 'cash' ? 'Ti·ªÅn m·∫∑t' : 'Chuy·ªÉn kho·∫£n'}
${finePayment.transactionCode ? `‚Ä¢ M√£ giao d·ªãch: ${finePayment.transactionCode}` : ''}

üí° B√¢y gi·ªù c√≥ th·ªÉ ti·∫øn h√†nh tr·∫£ s√°ch!`);

    // G·ªçi callback ƒë·ªÉ ti·∫øp t·ª•c quy tr√¨nh tr·∫£ s√°ch
    if (onConfirm) {
      onConfirm(finePayment);
    }
    
    onClose();
  };

  const getFineReasonText = (reason) => {
    switch (reason) {
      case 'late': return 'Tr·ªÖ h·∫°n';
      case 'damaged': return 'H∆∞ s√°ch';
      case 'lost': return 'M·∫•t s√°ch';
      default: return 'Tr·ªÖ h·∫°n';
    }
  };

  const getFineReasonDescription = (reason) => {
    switch (reason) {
      case 'late': return 'Tr·∫£ s√°ch qu√° h·∫°n quy ƒë·ªãnh';
      case 'damaged': return 'S√°ch b·ªã h∆∞ h·ªèng khi tr·∫£';
      case 'lost': return 'S√°ch b·ªã m·∫•t';
      default: return 'Tr·∫£ s√°ch qu√° h·∫°n quy ƒë·ªãnh';
    }
  };

  if (!isOpen || !fineData) return null;

  return (
    <div className="fine-payment-modal-overlay">
      <div className="fine-payment-modal">
        <div className="fine-payment-modal-header">
          <h2>
            <FaMoneyBillWave className="header-icon" />
            Phi·∫øu Thu Ph√≠ Ph·∫°t
          </h2>
          <button className="close-button" onClick={onClose}>
            <FaTimes />
          </button>
        </div>

        <form onSubmit={handleSubmit} className="fine-payment-form">
          {/* Th√¥ng tin th√†nh vi√™n */}
          <div className="form-section">
            <h3 className="section-title">
              <FaUser className="section-icon" />
              Th√¥ng Tin Th√†nh Vi√™n
            </h3>
            <div className="form-row">
              <div className="form-group">
                <label htmlFor="memberId">
                  <FaUser className="input-icon" />
                  M√£ th√†nh vi√™n *
                </label>
                <input
                  type="text"
                  id="memberId"
                  name="memberId"
                  value={paymentData.memberId}
                  onChange={handleInputChange}
                  className={errors.memberId ? 'error' : ''}
                  placeholder="Nh·∫≠p m√£ th√†nh vi√™n..."
                />
                {errors.memberId && (
                  <span className="error-message">{errors.memberId}</span>
                )}
              </div>

              <div className="form-group">
                <label htmlFor="memberName">
                  <FaUser className="input-icon" />
                  H·ªç t√™n
                </label>
                <input
                  type="text"
                  id="memberName"
                  name="memberName"
                  value={paymentData.memberName}
                  onChange={handleInputChange}
                  readOnly
                  className="readonly"
                />
                <small className="field-note">T·ª± ƒë·ªông ƒëi·ªÅn t·ª´ m√£ th√†nh vi√™n</small>
              </div>
            </div>
          </div>

          {/* Th√¥ng tin ph·∫°t */}
          <div className="form-section">
            <h3 className="section-title">
              <FaMoneyBillWave className="section-icon" />
              Th√¥ng Tin Ph·∫°t
            </h3>
            
            <div className="form-row">
              <div className="form-group">
                <label htmlFor="fineAmount">
                  <FaMoneyBillWave className="input-icon" />
                  Ph√≠ ph·∫°t (VNƒê) *
                </label>
                <input
                  type="number"
                  id="fineAmount"
                  name="fineAmount"
                  value={paymentData.fineAmount}
                  onChange={handleInputChange}
                  className={errors.fineAmount ? 'error' : ''}
                  placeholder="0"
                  min="0"
                />
                {errors.fineAmount && (
                  <span className="error-message">{errors.fineAmount}</span>
                )}
              </div>

              <div className="form-group">
                <label htmlFor="paymentDate">
                  <FaCalendarAlt className="input-icon" />
                  Ng√†y thanh to√°n *
                </label>
                <input
                  type="date"
                  id="paymentDate"
                  name="paymentDate"
                  value={paymentData.paymentDate}
                  onChange={handleInputChange}
                  className={errors.paymentDate ? 'error' : ''}
                />
                {errors.paymentDate && (
                  <span className="error-message">{errors.paymentDate}</span>
                )}
              </div>
            </div>

            <div className="form-row">
              <div className="form-group">
                <label htmlFor="violatingBookId">
                  <FaBook className="input-icon" />
                  M√£ s√°ch vi ph·∫°m *
                </label>
                <input
                  type="text"
                  id="violatingBookId"
                  name="violatingBookId"
                  value={paymentData.violatingBookId}
                  onChange={handleInputChange}
                  className={errors.violatingBookId ? 'error' : ''}
                  placeholder="Nh·∫≠p m√£ s√°ch..."
                />
                {errors.violatingBookId && (
                  <span className="error-message">{errors.violatingBookId}</span>
                )}
              </div>

              <div className="form-group">
                <label htmlFor="violatingBookTitle">
                  <FaBook className="input-icon" />
                  T√™n s√°ch vi ph·∫°m
                </label>
                <input
                  type="text"
                  id="violatingBookTitle"
                  name="violatingBookTitle"
                  value={paymentData.violatingBookTitle}
                  onChange={handleInputChange}
                  readOnly
                  className="readonly"
                />
              </div>
            </div>

            <div className="form-group">
              <label htmlFor="fineReason">
                <FaInfoCircle className="input-icon" />
                L√Ω do ph·∫°t *
              </label>
              <div className="radio-group">
                <label className="radio-option">
                  <input
                    type="radio"
                    name="fineReason"
                    value="late"
                    checked={paymentData.fineReason === 'late'}
                    onChange={handleInputChange}
                  />
                  <span className="radio-label">Tr·ªÖ h·∫°n</span>
                </label>
                <label className="radio-option">
                  <input
                    type="radio"
                    name="fineReason"
                    value="damaged"
                    checked={paymentData.fineReason === 'damaged'}
                    onChange={handleInputChange}
                  />
                  <span className="radio-label">H∆∞ s√°ch</span>
                </label>
                <label className="radio-option">
                  <input
                    type="radio"
                    name="fineReason"
                    value="lost"
                    checked={paymentData.fineReason === 'lost'}
                    onChange={handleInputChange}
                  />
                  <span className="radio-label">M·∫•t s√°ch</span>
                </label>
              </div>
              {errors.fineReason && (
                <span className="error-message">{errors.fineReason}</span>
              )}
              <small className="field-note">
                {getFineReasonDescription(paymentData.fineReason)}
              </small>
            </div>
          </div>

          {/* H√¨nh th·ª©c thanh to√°n */}
          <div className="form-section">
            <h3 className="section-title">
              <FaCreditCard className="section-icon" />
              H√¨nh Th·ª©c Thanh To√°n
            </h3>
            
            <div className="form-group">
              <label htmlFor="paymentMethod">
                <FaCreditCard className="input-icon" />
                Ch·ªçn h√¨nh th·ª©c thanh to√°n *
              </label>
              <div className="radio-group">
                <label className="radio-option">
                  <input
                    type="radio"
                    name="paymentMethod"
                    value="cash"
                    checked={paymentData.paymentMethod === 'cash'}
                    onChange={handleInputChange}
                  />
                  <span className="radio-label">Ti·ªÅn m·∫∑t</span>
                </label>
                <label className="radio-option">
                  <input
                    type="radio"
                    name="paymentMethod"
                    value="bank"
                    checked={paymentData.paymentMethod === 'bank'}
                    onChange={handleInputChange}
                  />
                  <span className="radio-label">Chuy·ªÉn kho·∫£n ng√¢n h√†ng</span>
                </label>
              </div>
              {errors.paymentMethod && (
                <span className="error-message">{errors.paymentMethod}</span>
              )}
            </div>

            {paymentData.paymentMethod === 'bank' && (
              <div className="form-group">
                <label htmlFor="transactionCode">
                  <FaCreditCard className="input-icon" />
                  M√£ giao d·ªãch
                </label>
                <input
                  type="text"
                  id="transactionCode"
                  name="transactionCode"
                  value={paymentData.transactionCode}
                  onChange={handleInputChange}
                  placeholder="Nh·∫≠p m√£ giao d·ªãch ng√¢n h√†ng..."
                />
                <small className="field-note">C√≥ th·ªÉ th√™m m√£ giao d·ªãch ƒë·ªÉ theo d√µi</small>
              </div>
            )}
          </div>

          {/* N√∫t h√†nh ƒë·ªông */}
          <div className="form-actions">
            <button type="button" className="cancel-button" onClick={onClose}>
              <FaTimes />
              H·ªßy
            </button>
            <button type="submit" className="submit-button">
              <FaCheck />
              X√°c Nh·∫≠n Thanh To√°n
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};

export default FinePaymentModal; 